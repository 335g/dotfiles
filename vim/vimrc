
if &compatible
  set nocompatible
endif

augroup MyAutoCmd
  autocmd!
augroup END


" Const {{{1

let $CACHE           = expand('$HOME/.cache')
let s:dein_dir       = expand('$CACHE/dein')
let s:dein_path      = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
let s:rc_dir         = expand('$HOME/dotfiles/vim/rc')
let s:dein_toml      = s:rc_dir . '/dein.toml'
let s:dein_lazy_toml = s:rc_dir . '/dein_lazy.toml'
let s:dein_neo_toml  = s:rc_dir . '/dein_neo.toml'

" }}}
" `dein` {{{1

if !isdirectory(expand($CACHE))
  call mkdir(expand($CACHE), 'p')
endif

if !isdirectory(s:dein_path)
  execute '!git clone git://github.com/Shougo/dein.vim' s:dein_path
endif
execute 'set runtimepath^=' . s:dein_path

if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  call dein#load_toml(s:dein_toml, {'lazy': 0})
  call dein#load_toml(s:dein_lazy_toml, {'lazy': 1})
  if has('nvim')
    call dein#load_toml(s:dein_neo_toml, {})

    if dein#tap('deoplete.nvim')
      call dein#disable('neocomplete.vim')
    endif
  endif

  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on

" }}}
" NeoVim {{{

if has('nvim')
  let s:num = 0
  for s:color in [
        \ '#6c6c6c', '#ff6666', '#66ff66', '#ffd30a',
        \ '#1e95fd', '#ff13ff', '#1bc8c8', '#c0c0c0',
        \ '#383838', '#ff4444', '#44ff44', '#ffb30a',
        \ '#6699ff', '#f820ff', '#4ae2e2', '#ffffff',
        \ ]
    let g:terminal_color_{s:num} = s:color
    let s:num += 1
  endfor

  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1

  if exists('+termguicolors')
    set termguicolors
  endif

endif

" }}}
" Setting {{{

set enc=utf-8
set fenc=utf-8
set fencs=iso-2022-jp,euc-p,cp932
set incsearch                       "インクリメンタルサーチを有効にする
set ignorecase                      "大文字小文字を区別しない
set smartcase                       "大文字で検索されたら対象を大文字限定にする
set wrapscan                        "最後まで検索したら最初に戻る
set hlsearch                        "検索結果をハイライト表示する
set smartindent                     "自動インデント有効化
set autoindent                      "自動インデント有効化
set showmatch                       "括弧の対応をハイライト
set shiftround                      "'<'や'>'でインデントする際に'shiftwidth'の倍数に丸める
set infercase                       "補完時に大文字小文字を区別しない
set virtualedit=all                 "カーソルを文字が存在しない部分でも動けるようにする
set hidden                          "バッファを閉じる代わりに隠す (Undo履歴を残すため)
set switchbuf=useopen               "新しく開く代わりにすでに開いてあるバッファを開く
set ruler                           "ルーラー
set number                          "行番号
set list                            "不可視文字(TAB, EOB)
set wrap                            "長いテキストの折り返し
set showmatch                       "対応する括弧などをハイライト表示する
set matchtime                       "対応括弧のハイライト表示を3秒にする
set matchpairs& matchpairs+=<:>     "対応括弧に'<'と'>'のペアを追加
set listchars=eol:¬,tab:›\
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab                       "TABをSPACEに置き換える
set cursorline                      "カーソルライン
set title                           "タイトル
set showcmd                         "ステータスラインにコマンドを表示
set laststatus=2                    "ステータスラインを常に表示
set backspace=indent,eol,start      "バックスペースでなんでも削除可能に

"}}}
" Colorscheme {{{

syntax enable
colorscheme iceberg

" }}}
" Key mapping {{{

" 入力モード中に素早くjjと入力した場合はESCとみなす
inoremap jj <Esc>

" ESCを二回押すことでハイライト消す
nmap <silent> <Esc><Esc> :nohlsearch<CR>

" カーソル下の単語を * で検索
vnoremap <slient> * "vy/\V<C-r>=substitute(escape(@v, '\/'), "\n", '\\n', 'g')<CR><CR>

" 検索後にジャンプした際に検索単語を画面中央に持ってくる
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" j, kによる移動を折り返されたテキストでも自然に振る舞うように変更
nnoremap j gj
nnoremap k gk

" vを二回を行末まで選択
vnoremap v $h

" TABにて対応ペアにジャンプ
nnoremap <Tab> %
vnoremap <Tab> %

" Ctrl + hjkl でウィンドウ間移動
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Ctrl + t で 型チェック (ghcmod-vim)
nnoremap <C-T> :GhcModType<CR>
nnoremap <S-T> :GhcModTypeClear<CR>

" Space + b で stack build 実行
nnoremap <Space>b :!stack build<CR>

" }}}
" Programming {{{1
" Rustlang {{{2

let g:rustfmt_autosave = 1
let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'

"}}}
" Swift {{{2
"}}}
"}}}
" Misc {{{
" vim:fdm=marker expandtab fdc=3 ft=vim ts=2 sw=2 sts=2
